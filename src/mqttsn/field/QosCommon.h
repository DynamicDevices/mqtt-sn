// Generated by commsdsl2comms v3.4.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref mqttsn::field::Qos field.

#pragma once

#include <cstdint>
#include <type_traits>

namespace mqttsn
{

namespace field
{

/// @brief Common types and functions for
///     @ref mqttsn::field::Qos field.
struct QosCommon
{
    /// @brief Values enumerator for
    ///     @ref mqttsn::field::Qos field.
    enum class ValueType : std::uint8_t
    {
        AtMostOnceDelivery = 0, ///< value @b AtMostOnceDelivery
        AtLeastOnceDelivery = 1, ///< value @b AtLeastOnceDelivery
        ExactlyOnceDelivery = 2, ///< value @b ExactlyOnceDelivery
        NoGwPublish = 3, ///< value @b NoGwPublish
        
        // --- Extra values generated for convenience ---
        FirstValue = 0, ///< First defined value.
        LastValue = 3, ///< Last defined value.
        ValuesLimit = 4, ///< Upper limit for defined values.
        
    };
    
    /// @brief Name of the @ref mqttsn::field::Qos field.
    static const char* name()
    {
        return "Qos";
    }
    
    /// @brief Retrieve name of the enum value
    static const char* valueName(ValueType val)
    {
        static const char* Map[] = {
            "AtMostOnceDelivery",
            "AtLeastOnceDelivery",
            "ExactlyOnceDelivery",
            "NoGwPublish"
        };
        static const std::size_t MapSize = std::extent<decltype(Map)>::value;
        
        if (MapSize <= static_cast<std::size_t>(val)) {
            return nullptr;
        }
        
        return Map[static_cast<std::size_t>(val)];
    }
    
};

/// @brief Values enumerator for
///     @ref mqttsn::field::Qos field.
using QosVal = QosCommon::ValueType;

} // namespace field

} // namespace mqttsn


